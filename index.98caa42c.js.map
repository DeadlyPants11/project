{"mappings":"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","sources":["src/index.js","src/js/pagination.js","src/js/fetch-films.js","src/js/load-from-storage.js","src/js/get-film-card.js","src/js/on-search.js"],"sourcesContent":["// import axios from 'axios';\nimport './loader';\nimport './js/add-to-localstorage-btn';\n\nimport './js/pagination';\nimport './js/on-search.js';\nimport { createMarkup } from './markup/markupfilmcard';\nimport getFilmCard from './js/get-film-card';\nimport './js/modal-open-close';\nimport './js/api';\n\nimport './js/modat-team';\n\nimport './js/button-up';\n\ngetFilmCard().then(resp => {\n  createMarkup(resp.results);\n});\n\n// const filmComtainer = document.querySelector('.film__container');\n\n// const KEY = '8378c884a6341b6bb6a7cfb362550079';\n// const BASE_URL = 'https://api.themoviedb.org/3';\n\n// async function getFilmCard(content, page = 1) {\n//   try {\n//     const responce = await axios.get(\n//       `${BASE_URL}/trending/movie/week?api_key=${KEY}`\n//     );\n//     const film = responce.data.results;\n//     return film;\n//   } catch (error) {\n//     return error.message;\n//   }\n// }\n\n// function createMarkup(resp) {\n//   const filmCard = resp\n//     .map(({ poster_path, title, genre_ids, vote_average }) => {\n//       return `<div class=\"film__wrap\">\n//   <img src=\"https://image.tmdb.org/t/p/w500/${poster_path}\" alt=\"${title}\" />\n//   <ul>\n//     <li class=\"film__item\">${title}</li>\n//     <li class=\"film__item\">${genre_ids} | ${vote_average}</li>\n//   </ul>\n// </div>`;\n//     })\n//     .join('');\n\n//   filmComtainer.insertAdjacentHTML('beforeend', filmCard);\n// }\n\nconsole.log('index.js loaded');\n","import { createMarkup } from '../markup/markupfilmcard';\nimport getFilmCard from './get-film-card';\n\nconst paginationUl = document.querySelector('.pagination');\nconst filmComtainer = document.querySelector('.film__container');\nconst search = document.querySelector('.form__input');\n\npaginationUl.addEventListener('click', onPaginationClick);\n\nfunction onPaginationClick(event) {\n  const query = search.value.trim();\n  if (event.target.textContent === '...') {\n    return;\n  }\n  if (event.target.nodeName.toLowerCase() !== 'li') {\n    return;\n  }\n  filmComtainer.innerHTML = '';\n\n  if (event.target.textContent === 'ðŸ¡¸') {\n    const newCurrentPage = (globalCurrentPage -= 1);\n    getFilmCard(query, newCurrentPage).then(resp => {\n      createMarkup(resp.results);\n      pagination(resp.page, resp.total_pages);\n    });\n    return;\n  }\n  if (event.target.textContent === 'ðŸ¡º') {\n    getFilmCard(query, (globalCurrentPage += 1)).then(resp => {\n      createMarkup(resp.results);\n      pagination(resp.page, resp.total_pages);\n    });\n    return;\n  }\n  const page = Number(event.target.textContent);\n  getFilmCard(query, page).then(resp => {\n    createMarkup(resp.results);\n    pagination(resp.page, resp.total_pages);\n  });\n}\n\ngetFilmCard().then(resp => {\n  createMarkup(resp.results);\n  pagination(resp.page, resp.total_pages);\n});\n\nlet globalCurrentPage = 0;\n\nexport function pagination(currentPage, allPages) {\n  const typeOfValue = typeof currentPage;\n  if (typeOfValue !== 'number') {\n    console.error('currentPage:Not a number');\n    return;\n  }\n\n  const typeOfAllPages = typeof allPages;\n  if (typeOfAllPages !== 'number') {\n    console.error('allPages: Not a number');\n    return;\n  }\n\n  let markup = '';\n  let beforeTwoPages = currentPage - 2;\n  let beforePage = currentPage - 1;\n  let afterPage = currentPage + 1;\n  let afterTwoPages = currentPage + 2;\n  globalCurrentPage = currentPage;\n\n  if (currentPage > 1) {\n    markup += `<li class=\"arrow-right\">&#129144;</li>`;\n    markup += `<li>1</li>`;\n  }\n\n  if (currentPage > 4) {\n    markup += `<li class=\"dots\">...</li>`;\n  }\n\n  if (currentPage > 3) {\n    markup += `<li>${beforeTwoPages}</li>`;\n  }\n\n  if (currentPage > 2) {\n    markup += `<li>${beforePage}</li>`;\n  }\n\n  markup += `<li class=\"pagination-current\">${currentPage}</li>`;\n\n  if (allPages - 1 > currentPage) {\n    markup += `<li>${afterPage}</li>`;\n  }\n\n  if (allPages - 2 > currentPage) {\n    markup += `<li>${afterTwoPages}</li>`;\n  }\n\n  if (allPages - 3 > currentPage) {\n    markup += `<li class=\"dots\">...</li> `;\n  }\n\n  if (allPages > currentPage) {\n    markup += `<li>${allPages}</li>`;\n    markup += `<li class=\"arrow-right\">&#129146;</li>`;\n  }\n\n  paginationUl.innerHTML = markup;\n}\n","import axios from 'axios';\n\nexport default class FetchFilms {\n  constructor() {\n    this.authKey = '8378c884a6341b6bb6a7cfb362550079';\n    this.baseUrl = 'https://api.themoviedb.org/3';\n    this.currentPage = 1;\n    this.searchQuery = '';\n    this.lastQuery = '';\n    this.searchParams = '';\n  }\n\n  //   resetPage() {\n  //     this.currentPage = 1;\n  //   }\n\n  //   decrementPage() {\n  //     this.currentPage -= 1;\n  //   }\n\n  //   incrementPage() {\n  //     this.currentPage += 1;\n  //   }\n\n  //   get page() {\n  //     return this.currentPage;\n  //   }\n\n  //   set page(newPage) {\n  //     this.currentPage = newPage;\n  //   }\n\n  //   get query() {\n  //     return this.searchQuery;\n  //   }\n  //   set query(newQuery) {\n  //     this.lastQuery = this.searchQuery;\n  //     this.searchQuery = newQuery;\n  //   }\n\n  async fetchFilms(query = '', page = 1) {\n    let url = '';\n    if (!query) {\n      this.searchParams = new URLSearchParams({\n        api_key: this.authKey,\n        page: page,\n      });\n      url = `${this.baseUrl}/trending/movie/week?${this.searchParams}`;\n    } else {\n      this.searchParams = new URLSearchParams({\n        api_key: this.authKey,\n        page: page,\n        query: query,\n      });\n      url = `${this.baseUrl}/search/movie?${this.searchParams}`;\n    }\n    try {\n      const response = await axios.get(url);\n      return response.data;\n    } catch (error) {}\n  }\n}\n","export default function loadFromStorage(query, page) {\n  try {\n    const getLoadedFilms = localStorage.getItem('CURRENT_FILMS');\n    const parseLoadedFilms = JSON.parse(getLoadedFilms);\n    if (parseLoadedFilms.page === page && parseLoadedFilms.query === query) {\n      return parseLoadedFilms;\n    }\n    return false;\n  } catch (error) {\n    console.error('Get state error: ', error.message);\n  }\n}\n","import FetchFilms from './fetch-films';\nimport loadFromStorage from './load-from-storage';\n\nexport default function getFilmCard(query = '', page = 1) {\n  const fetch = new FetchFilms();\n  const filmsInStorage = loadFromStorage(query, page);\n  if (filmsInStorage) {\n    return Promise.resolve(filmsInStorage.results);\n  }\n\n  return fetch.fetchFilms(query, page).then(data => {\n    try {\n      const filmsToSave = JSON.stringify({\n        page: page,\n        query: query,\n        results: data,\n\n        // queue: queue,\n        // watched: watched,\n        // id: id\n\n      });\n      localStorage.setItem('CURRENT_FILMS', filmsToSave);\n    } catch (error) {\n      console.error('Set state error: ', error.message);\n    }\n    return data;\n  });\n}\n","import FetchFilms from './fetch-films';\nimport { createMarkup } from '../markup/markupfilmcard';\nimport { pagination } from './pagination';\nimport getFilmCard from './get-film-card';\nconst refs = {\n  filmContainer: document.querySelector('.film__container'),\n  searchForm: document.querySelector('.search__form'),\n  notification: document.querySelector('.container__notification'),\n};\n\nconst fetchFilmsByQuery = new FetchFilms();\n\nfunction onSearchFormSubmit(e) {\n  e.preventDefault();\n  const form = e.currentTarget;\n  const query = form.elements.name.value.trim();\n  fetchFilmsByQuery.query = query;\n  if (!query) {\n    fetchFilmsByQuery.query = fetchFilmsByQuery.lastQuery;\n    form.elements.name.value = fetchFilmsByQuery.lastQuery;\n    refs.notification.textContent =\n      'Search result not successful. Enter the correct movie name';\n    const cleantimer = setTimeout(\n      () => (refs.notification.textContent = ''),\n      3000\n    );\n    return;\n  }\n  getFilmCard(query, 1)\n    .then(res => {\n      if (res.results.length === 0) {\n        form.elements.name.value = fetchFilmsByQuery.lastQuery;\n        refs.notification.textContent =\n          'Search result not successful. Enter the correct movie name';\n        const cleantimer = setTimeout(\n          () => (refs.notification.textContent = ''),\n          3000\n        );\n        throw new Error();\n      }\n      fetchFilmsByQuery.lastQuery = query;\n      refs.filmContainer.innerHTML = '';\n      refs.filmContainer.insertAdjacentHTML(\n        'beforeend',\n        createMarkup(res.results)\n      );\n      pagination(res.page, res.total_pages);\n    })\n\n    .catch(error => {\n      fetchFilmsByQuery.query = fetchFilmsByQuery.lastQuery;\n    });\n}\n\nrefs.searchForm.addEventListener('submit', onSearchFormSubmit);\n"],"names":["parcelRequire","$1SkT2","$2shzp","$b4a7e464f5ca5a67$export$2e2bcd8739ae039","async","query","page","url","this","searchParams","URLSearchParams","api_key","authKey","baseUrl","default","get","data","error","constructor","currentPage","searchQuery","lastQuery","$3537dc2ddc377b8d$export$2e2bcd8739ae039","getLoadedFilms","localStorage","getItem","parseLoadedFilms","JSON","parse","console","message","$9f38e6b0aba04e4b$export$2e2bcd8739ae039","fetch","filmsInStorage","Promise","resolve","results","fetchFilms","then","filmsToSave","stringify","setItem","$1bab9c519cfa82bc$var$paginationUl","document","querySelector","$1bab9c519cfa82bc$var$filmComtainer","$1bab9c519cfa82bc$var$search","addEventListener","event","value","trim","target","textContent","nodeName","toLowerCase","innerHTML","newCurrentPage","$1bab9c519cfa82bc$var$globalCurrentPage","resp","createMarkup","$1bab9c519cfa82bc$export$22fa394f3ba39578","total_pages","Number","allPages","markup","$3c85be45bacb8e1a$var$refs","filmContainer","searchForm","notification","$3c85be45bacb8e1a$var$fetchFilmsByQuery","e","preventDefault","form","currentTarget","elements","name","res","length","setTimeout","Error","insertAdjacentHTML","catch","log"],"version":3,"file":"index.98caa42c.js.map"}
{"mappings":"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","sources":["src/index.js","src/js/pagination.js","src/js/fetch-films.js","<<jsx-config-pragma.js>>","src/js/load-from-storage.js","src/js/get-film-card.js","src/js/on-search.js"],"sourcesContent":["import './loader';\nimport './js/add-to-localstorage-btn';\n\nimport './js/pagination';\nimport './js/on-search.js';\nimport './js/modal-open-close';\nimport './js/api';\n\nimport './js/modal-team';\n\nimport './js/button-up';\n","import { createMarkup } from '../markup/markupfilmcard';\nimport getFilmCard from './get-film-card';\n\nconst paginationUl = document.querySelector('.pagination');\nconst filmComtainer = document.querySelector('.film__container');\nconst search = document.querySelector('.form__input');\n\npaginationUl.addEventListener('click', onPaginationClick);\n\nfunction onPaginationClick(event) {\n  const query = search.value.trim();\n  if (event.target.textContent === '...') {\n    return;\n  }\n  if (event.target.nodeName.toLowerCase() !== 'li') {\n    return;\n  }\n  filmComtainer.innerHTML = '';\n\n  if (event.target.textContent === 'ðŸ¡¸') {\n    const newCurrentPage = (globalCurrentPage -= 1);\n    getFilmCard(query, newCurrentPage).then(resp => {\n      createMarkup(resp.results);\n      pagination(resp.page, resp.total_pages);\n    });\n    return;\n  }\n  if (event.target.textContent === 'ðŸ¡º') {\n    getFilmCard(query, (globalCurrentPage += 1)).then(resp => {\n      createMarkup(resp.results);\n      pagination(resp.page, resp.total_pages);\n    });\n    return;\n  }\n  const page = Number(event.target.textContent);\n  getFilmCard(query, page).then(resp => {\n    createMarkup(resp.results);\n    pagination(resp.page, resp.total_pages);\n  });\n}\n\ngetFilmCard().then(resp => {\n  createMarkup(resp.results);\n  pagination(resp.page, resp.total_pages);\n});\n\nlet globalCurrentPage = 0;\n\nexport function pagination(currentPage, allPages) {\n  const typeOfValue = typeof currentPage;\n  if (typeOfValue !== 'number') {\n    console.error('currentPage:Not a number');\n    return;\n  }\n\n  const typeOfAllPages = typeof allPages;\n  if (typeOfAllPages !== 'number') {\n    console.error('allPages: Not a number');\n    return;\n  }\n\n  let markup = '';\n  let beforeTwoPages = currentPage - 2;\n  let beforePage = currentPage - 1;\n  let afterPage = currentPage + 1;\n  let afterTwoPages = currentPage + 2;\n  globalCurrentPage = currentPage;\n\n  if (currentPage > 1) {\n    markup += `<li class=\"arrow-right\">&#129144;</li>`;\n    markup += `<li>1</li>`;\n  }\n\n  if (currentPage > 4) {\n    markup += `<li class=\"dots\">...</li>`;\n  }\n\n  if (currentPage > 3) {\n    markup += `<li>${beforeTwoPages}</li>`;\n  }\n\n  if (currentPage > 2) {\n    markup += `<li>${beforePage}</li>`;\n  }\n\n  markup += `<li class=\"pagination-current\">${currentPage}</li>`;\n\n  if (allPages - 1 > currentPage) {\n    markup += `<li>${afterPage}</li>`;\n  }\n\n  if (allPages - 2 > currentPage) {\n    markup += `<li>${afterTwoPages}</li>`;\n  }\n\n  if (allPages - 3 > currentPage) {\n    markup += `<li class=\"dots\">...</li> `;\n  }\n\n  if (allPages > currentPage) {\n    markup += `<li>${allPages}</li>`;\n    markup += `<li class=\"arrow-right\">&#129146;</li>`;\n  }\n\n  paginationUl.innerHTML = markup;\n}\n","import axios from 'axios';\n\nexport default class FetchFilms {\n  constructor() {\n    this.authKey = '8378c884a6341b6bb6a7cfb362550079';\n    this.baseUrl = 'https://api.themoviedb.org/3';\n    this.currentPage = 1;\n    this.searchQuery = '';\n    this.lastQuery = '';\n    this.searchParams = '';\n  }\n\n  async fetchFilms(query = '', page = 1) {\n    let url = '';\n    if (!query) {\n      this.searchParams = new URLSearchParams({\n        api_key: this.authKey,\n        page: page,\n      });\n      url = `${this.baseUrl}/trending/movie/week?${this.searchParams}`;\n    } else {\n      this.searchParams = new URLSearchParams({\n        api_key: this.authKey,\n        page: page,\n        query: query,\n      });\n      url = `${this.baseUrl}/search/movie?${this.searchParams}`;\n    }\n    try {\n      const response = await axios.get(url);\n      return response.data;\n    } catch (error) {}\n  }\n}\n",null,"export default function loadFromStorage(query, page) {\n  try {\n    const getLoadedFilms = localStorage.getItem('CURRENT_FILMS');\n    const parseLoadedFilms = JSON.parse(getLoadedFilms);\n    if (parseLoadedFilms.page === page && parseLoadedFilms.query === query) {\n      return parseLoadedFilms;\n    }\n    return false;\n  } catch (error) {\n    console.error('Get state error: ', error.message);\n  }\n}\n","import FetchFilms from './fetch-films';\nimport loadFromStorage from './load-from-storage';\n\nexport default function getFilmCard(query = '', page = 1) {\n  const fetch = new FetchFilms();\n  const filmsInStorage = loadFromStorage(query, page);\n  if (filmsInStorage) {\n    return Promise.resolve(filmsInStorage.results);\n  }\n\n  return fetch.fetchFilms(query, page).then(data => {\n    try {\n      const filmsToSave = JSON.stringify({\n        page: page,\n        query: query,\n        results: data,\n      });\n      localStorage.setItem('CURRENT_FILMS', filmsToSave);\n    } catch (error) {\n      console.error('Set state error: ', error.message);\n    }\n    return data;\n  });\n}\n","import FetchFilms from './fetch-films';\nimport { createMarkup } from '../markup/markupfilmcard';\nimport { pagination } from './pagination';\nimport getFilmCard from './get-film-card';\nconst refs = {\n  filmContainer: document.querySelector('.film__container'),\n  searchForm: document.querySelector('.search__form'),\n  notification: document.querySelector('.container__notification'),\n};\n\nconst fetchFilmsByQuery = new FetchFilms();\n\nfunction onSearchFormSubmit(e) {\n  e.preventDefault();\n  const form = e.currentTarget;\n  const query = form.elements.name.value.trim();\n  fetchFilmsByQuery.query = query;\n  if (!query) {\n    fetchFilmsByQuery.query = fetchFilmsByQuery.lastQuery;\n    form.elements.name.value = fetchFilmsByQuery.lastQuery;\n    refs.notification.textContent =\n      'Search result not successful. Enter the correct movie name';\n    const cleantimer = setTimeout(\n      () => (refs.notification.textContent = ''),\n      3000\n    );\n    return;\n  }\n  getFilmCard(query, 1)\n    .then(res => {\n      if (res.results.length === 0) {\n        form.elements.name.value = fetchFilmsByQuery.lastQuery;\n        refs.notification.textContent =\n          'Search result not successful. Enter the correct movie name';\n        const cleantimer = setTimeout(\n          () => (refs.notification.textContent = ''),\n          3000\n        );\n        throw new Error();\n      }\n      fetchFilmsByQuery.lastQuery = query;\n      refs.filmContainer.innerHTML = '';\n      refs.filmContainer.insertAdjacentHTML(\n        'beforeend',\n        createMarkup(res.results)\n      );\n      pagination(res.page, res.total_pages);\n    })\n\n    .catch(error => {\n      fetchFilmsByQuery.query = fetchFilmsByQuery.lastQuery;\n    });\n}\n\nrefs.searchForm.addEventListener('submit', onSearchFormSubmit);\n"],"names":["parcelRequire","$l5bVx","$bpxeT","$2767eeec1e690a49$export$2e2bcd8739ae039","FetchFilms","this","authKey","baseUrl","currentPage","searchQuery","lastQuery","searchParams","key","query","arguments","length","page","$parcel$interopDefault","$2TvXO","mark","_callee","url","response","_this","URLSearchParams","api_key","concat","$dIxxU","default","get","_ctx","sent","data","$aa7c9fda866fd271$export$2e2bcd8739ae039","getLoadedFilms","localStorage","getItem","parseLoadedFilms","JSON","parse","error","console","message","$347e6146d5d22713$export$2e2bcd8739ae039","fetch","filmsInStorage","Promise","resolve","results","fetchFilms","then","filmsToSave","stringify","setItem","$dfaf77c789ce7a24$var$paginationUl","document","querySelector","$dfaf77c789ce7a24$var$filmComtainer","$dfaf77c789ce7a24$var$search","addEventListener","event","value","trim","target","textContent","nodeName","toLowerCase","innerHTML","newCurrentPage","$dfaf77c789ce7a24$var$globalCurrentPage","resp","$4QXHb","createMarkup","$dfaf77c789ce7a24$export$22fa394f3ba39578","total_pages","Number","allPages","markup","beforePage","afterPage","afterTwoPages","$fd13c85c3a8f4e33$var$refs","filmContainer","searchForm","notification","$fd13c85c3a8f4e33$var$fetchFilmsByQuery","e","preventDefault","form","currentTarget","elements","name","res","setTimeout","Error","insertAdjacentHTML","catch"],"version":3,"file":"index.39e93cc7.js.map"}